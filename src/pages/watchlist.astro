---
// src/pages/watchlist.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Mi Watchlist - MovieDash">
  <!-- Hero Section -->
  <section
    class="bg-gradient-to-r from-blue-900 via-purple-900 to-indigo-900 rounded-lg p-8 mb-8 text-center"
  >
    <h1 class="text-4xl md:text-6xl font-bold text-white mb-4">
      📋 Mi Watchlist
    </h1>
    <p class="text-xl text-gray-200 mb-6">
      Gestiona tus películas y series pendientes de ver
    </p>
  </section>

  <!-- Watchlist Component -->
  <div id="watchlist-container"></div>

  <!-- Add Items Section -->
  <section class="mt-8 bg-gray-800 p-6 rounded-lg shadow-lg">
    <h2 class="text-2xl font-bold mb-6 text-primary-400">
      ➕ Agregar Elementos
    </h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <div>
        <label class="block text-sm font-medium text-gray-300 mb-2"
          >Buscar película:</label
        >
        <input
          type="text"
          id="movie-search"
          placeholder="Ej: Matrix, Inception..."
          class="w-full px-4 py-2 bg-gray-700 text-white rounded-lg border border-gray-600 focus:outline-none focus:border-primary-500"
        />
        <div id="movie-results" class="mt-2 space-y-2"></div>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-300 mb-2"
          >Buscar serie:</label
        >
        <input
          type="text"
          id="tv-search"
          placeholder="Ej: Breaking Bad, Game of Thrones..."
          class="w-full px-4 py-2 bg-gray-700 text-white rounded-lg border border-gray-600 focus:outline-none focus:border-primary-500"
        />
        <div id="tv-results" class="mt-2 space-y-2"></div>
      </div>
    </div>

    <!-- Quick Add Buttons -->
    <div class="flex flex-wrap gap-2">
      <button
        onclick="addQuickItem('movie', 'The Matrix', 1999, 8.7)"
        class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
      >
        🎬 The Matrix
      </button>
      <button
        onclick="addQuickItem('movie', 'Inception', 2010, 8.8)"
        class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
      >
        🎬 Inception
      </button>
      <button
        onclick="addQuickItem('tv', 'Breaking Bad', 2008, 9.5)"
        class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors"
      >
        📺 Breaking Bad
      </button>
      <button
        onclick="addQuickItem('tv', 'Game of Thrones', 2011, 9.2)"
        class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors"
      >
        📺 Game of Thrones
      </button>
    </div>
  </section>
</Layout>

<script>
  // Watchlist Storage Manager
  class WatchlistManager {
    constructor() {
      this.watchlist = this.loadWatchlist();
      this.render();
      this.setupSearch();
    }

    loadWatchlist() {
      const stored =
        typeof window !== 'undefined'
          ? localStorage.getItem('movieDashWatchlist')
          : null;
      return stored ? JSON.parse(stored) : [];
    }

    saveWatchlist() {
      if (typeof window !== 'undefined') {
        localStorage.setItem(
          'movieDashWatchlist',
          JSON.stringify(this.watchlist)
        );
      }
    }

    addItem(item, type) {
      const exists = this.watchlist.find(
        (w) => w.id === item.id && w.type === type
      );
      if (exists) {
        this.showNotification(
          `"${item.title || item.name}" ya está en tu watchlist`,
          'warning'
        );
        return;
      }

      const watchlistItem = {
        id: item.id || Date.now(),
        title: item.title || item.name,
        year: item.year || new Date().getFullYear(),
        rating: item.rating || item.vote_average || 0,
        poster: item.poster_path || null,
        type: type,
        dateAdded: new Date().toISOString(),
        isWatched: false,
        notes: '',
        priority: 'medium',
      };

      this.watchlist.unshift(watchlistItem);
      this.saveWatchlist();
      this.render();
      this.showNotification(
        `"${watchlistItem.title}" agregado a tu watchlist`,
        'success'
      );
    }

    removeItem(id, type) {
      const item = this.watchlist.find((w) => w.id === id && w.type === type);
      this.watchlist = this.watchlist.filter(
        (w) => !(w.id === id && w.type === type)
      );
      this.saveWatchlist();
      this.render();
      this.showNotification(
        `"${item?.title}" eliminado de tu watchlist`,
        'info'
      );
    }

    toggleWatched(id, type) {
      const item = this.watchlist.find((w) => w.id === id && w.type === type);
      if (item) {
        item.isWatched = !item.isWatched;
        if (item.isWatched) {
          item.dateWatched = new Date().toISOString();
        } else {
          delete item.dateWatched;
        }
        this.saveWatchlist();
        this.render();
        this.showNotification(
          `"${item.title}" marcado como ${item.isWatched ? 'visto' : 'pendiente'}`,
          'success'
        );
      }
    }

    setPriority(id, type, priority) {
      const item = this.watchlist.find((w) => w.id === id && w.type === type);
      if (item) {
        item.priority = priority;
        this.saveWatchlist();
        this.render();
      }
    }

    updateNotes(id, type, notes) {
      const item = this.watchlist.find((w) => w.id === id && w.type === type);
      if (item) {
        item.notes = notes;
        this.saveWatchlist();
      }
    }

    getStats() {
      const total = this.watchlist.length;
      const watched = this.watchlist.filter((item) => item.isWatched).length;
      const unwatched = total - watched;
      const movies = this.watchlist.filter(
        (item) => item.type === 'movie'
      ).length;
      const tvShows = this.watchlist.filter(
        (item) => item.type === 'tv'
      ).length;
      const avgRating =
        total > 0
          ? (
              this.watchlist.reduce(
                (sum, item) => sum + (item.rating || 0),
                0
              ) / total
            ).toFixed(1)
          : '0.0';

      return { total, watched, unwatched, movies, tvShows, avgRating };
    }

    render() {
      const container = document.getElementById('watchlist-container');
      if (!container) return;

      const stats = this.getStats();
      const filteredItems = [...this.watchlist].sort((a, b) => {
        // Sort by priority, then by date added
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        if (a.priority !== b.priority) {
          return priorityOrder[b.priority] - priorityOrder[a.priority];
        }
        return (
          new Date(b.dateAdded).getTime() - new Date(a.dateAdded).getTime()
        );
      });

      container.innerHTML = `
        <!-- Stats Panel -->
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
          <div class="bg-gray-800 p-4 rounded-lg text-center border border-gray-700">
            <div class="text-2xl font-bold text-blue-400">${stats.total}</div>
            <div class="text-xs text-gray-400">Total</div>
          </div>
          <div class="bg-gray-800 p-4 rounded-lg text-center border border-gray-700">
            <div class="text-2xl font-bold text-green-400">${stats.watched}</div>
            <div class="text-xs text-gray-400">Vistas</div>
          </div>
          <div class="bg-gray-800 p-4 rounded-lg text-center border border-gray-700">
            <div class="text-2xl font-bold text-yellow-400">${stats.unwatched}</div>
            <div class="text-xs text-gray-400">Pendientes</div>
          </div>
          <div class="bg-gray-800 p-4 rounded-lg text-center border border-gray-700">
            <div class="text-2xl font-bold text-purple-400">${stats.movies}</div>
            <div class="text-xs text-gray-400">Películas</div>
          </div>
          <div class="bg-gray-800 p-4 rounded-lg text-center border border-gray-700">
            <div class="text-2xl font-bold text-pink-400">${stats.tvShows}</div>
            <div class="text-xs text-gray-400">Series</div>
          </div>
        </div>

        <!-- Filter Controls -->
        <div class="mb-6 bg-gray-800 p-4 rounded-lg border border-gray-700">
          <div class="flex flex-wrap gap-4 items-center">
            <div class="flex gap-2">
              <button onclick="watchlistManager.filterItems('all')" class="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded text-sm transition-colors">
                Todos (${stats.total})
              </button>
              <button onclick="watchlistManager.filterItems('unwatched')" class="px-3 py-1 bg-yellow-600 hover:bg-yellow-500 text-white rounded text-sm transition-colors">
                Pendientes (${stats.unwatched})
              </button>
              <button onclick="watchlistManager.filterItems('watched')" class="px-3 py-1 bg-green-600 hover:bg-green-500 text-white rounded text-sm transition-colors">
                Vistas (${stats.watched})
              </button>
            </div>
            <div class="flex gap-2">
              <button onclick="watchlistManager.filterItems('movie')" class="px-3 py-1 bg-blue-600 hover:bg-blue-500 text-white rounded text-sm transition-colors">
                🎬 Películas
              </button>
              <button onclick="watchlistManager.filterItems('tv')" class="px-3 py-1 bg-green-600 hover:bg-green-500 text-white rounded text-sm transition-colors">
                📺 Series
              </button>
            </div>
          </div>
        </div>

        <!-- Watchlist Items -->
        <div class="space-y-4">
          ${
            filteredItems.length === 0
              ? `
            <div class="text-center py-12 bg-gray-800 rounded-lg border border-gray-700">
              <div class="text-4xl mb-4">📭</div>
              <h3 class="text-xl font-semibold text-white mb-2">Tu watchlist está vacía</h3>
              <p class="text-gray-400 mb-6">¡Agrega algunas películas y series para empezar!</p>
              <button onclick="document.getElementById('movie-search').focus()" class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-2 rounded-lg transition-colors">
                Buscar contenido
              </button>
            </div>
          `
              : filteredItems.map((item) => this.renderItem(item)).join('')
          }
        </div>
      `;
    }

    renderItem(item) {
      const priorityColors = {
        high: 'border-red-500 bg-red-900/20',
        medium: 'border-yellow-500 bg-yellow-900/20',
        low: 'border-green-500 bg-green-900/20',
      };

      const priorityLabels = {
        high: '🔥 Alta',
        medium: '⚡ Media',
        low: '🟢 Baja',
      };

      return `
        <div class="bg-gray-800 rounded-lg p-4 border-l-4 ${priorityColors[item.priority]} border border-gray-700 hover:bg-gray-750 transition-colors">
          <div class="flex gap-4">
            <div class="flex-shrink-0">
              ${
                item.poster
                  ? `
                <img src="https://image.tmdb.org/t/p/w92${item.poster}" alt="${item.title}" class="w-16 h-24 object-cover rounded">
              `
                  : `
                <div class="w-16 h-24 bg-gray-600 rounded flex items-center justify-center">
                  <span class="text-2xl">${item.type === 'movie' ? '🎬' : '📺'}</span>
                </div>
              `
              }
            </div>
            
            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between mb-2">
                <div>
                  <h3 class="text-lg font-semibold text-white truncate">${item.title}</h3>
                  <div class="flex items-center gap-3 text-sm text-gray-400">
                    <span>📅 ${item.year}</span>
                    <span>⭐ ${item.rating.toFixed(1)}</span>
                    <span>${item.type === 'movie' ? '🎬 Película' : '📺 Serie'}</span>
                    <span class="text-xs ${item.isWatched ? 'text-green-400' : 'text-yellow-400'}">
                      ${item.isWatched ? '✓ Vista' : '⏳ Pendiente'}
                    </span>
                  </div>
                </div>
                
                <select onchange="watchlistManager.setPriority(${item.id}, '${item.type}', this.value)" class="bg-gray-700 text-white text-xs rounded px-2 py-1 border border-gray-600">
                  <option value="low" ${item.priority === 'low' ? 'selected' : ''}>🟢 Baja</option>
                  <option value="medium" ${item.priority === 'medium' ? 'selected' : ''}>⚡ Media</option>
                  <option value="high" ${item.priority === 'high' ? 'selected' : ''}>🔥 Alta</option>
                </select>
              </div>
              
              <div class="mb-3">
                <textarea 
                  placeholder="Agregar notas..." 
                  class="w-full bg-gray-700 text-white text-sm rounded px-3 py-2 border border-gray-600 resize-none h-16"
                  onblur="watchlistManager.updateNotes(${item.id}, '${item.type}', this.value)"
                >${item.notes || ''}</textarea>
              </div>
              
              <div class="flex items-center justify-between">
                <div class="text-xs text-gray-500">
                  Agregado: ${new Date(item.dateAdded).toLocaleDateString()}
                  ${item.dateWatched ? ` • Visto: ${new Date(item.dateWatched).toLocaleDateString()}` : ''}
                </div>
                
                <div class="flex gap-2">
                  <button 
                    onclick="watchlistManager.toggleWatched(${item.id}, '${item.type}')"
                    class="px-3 py-1 rounded text-xs transition-colors ${
                      item.isWatched
                        ? 'bg-green-600 hover:bg-green-700 text-white'
                        : 'bg-yellow-600 hover:bg-yellow-700 text-white'
                    }"
                  >
                    ${item.isWatched ? '✓ Vista' : '👁 Marcar vista'}
                  </button>
                  
                  <button 
                    onclick="watchlistManager.removeItem(${item.id}, '${item.type}')"
                    class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-xs transition-colors"
                  >
                    🗑 Eliminar
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    filterItems(filter) {
      // This would update the render to show filtered items
      // For now, we'll just re-render all items
      this.render();
    }

    setupSearch() {
      let movieTimeout, tvTimeout;

      // Movie search
      const movieSearch = document.getElementById('movie-search');
      if (movieSearch) {
        movieSearch.addEventListener('input', (e) => {
          clearTimeout(movieTimeout);
          movieTimeout = setTimeout(
            () => this.searchMovies(e.target.value),
            500
          );
        });
      }

      // TV search
      const tvSearch = document.getElementById('tv-search');
      if (tvSearch) {
        tvSearch.addEventListener('input', (e) => {
          clearTimeout(tvTimeout);
          tvTimeout = setTimeout(() => this.searchTVShows(e.target.value), 500);
        });
      }
    }

    async searchMovies(query) {
      const resultsDiv = document.getElementById('movie-results');
      if (!query.trim() || !resultsDiv) {
        if (resultsDiv) resultsDiv.innerHTML = '';
        return;
      }

      resultsDiv.innerHTML =
        '<div class="text-gray-400 text-sm">🔄 Buscando...</div>';

      try {
        const response = await fetch(
          `https://api.themoviedb.org/3/search/movie?api_key=4c13d79da36a97c80e70be9f823eb0ac&language=es-ES&query=${encodeURIComponent(query)}`
        );
        const data = await response.json();

        const results = data.results
          .slice(0, 3)
          .map(
            (movie) => `
          <div class="bg-gray-700 p-2 rounded flex items-center justify-between">
            <div>
              <span class="text-white text-sm font-medium">${movie.title}</span>
              <span class="text-gray-400 text-xs ml-2">(${new Date(movie.release_date).getFullYear()})</span>
            </div>
            <button onclick="watchlistManager.addItem({id: ${movie.id}, title: '${movie.title.replace(/'/g, "\\'")}', year: ${new Date(movie.release_date).getFullYear()}, rating: ${movie.vote_average}, poster_path: '${movie.poster_path || ''}'}, 'movie')" class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs transition-colors">
              ➕ Agregar
            </button>
          </div>
        `
          )
          .join('');

        resultsDiv.innerHTML =
          results ||
          '<div class="text-gray-400 text-sm">No se encontraron resultados</div>';
      } catch (error) {
        resultsDiv.innerHTML =
          '<div class="text-red-400 text-sm">Error en la búsqueda</div>';
      }
    }

    async searchTVShows(query) {
      const resultsDiv = document.getElementById('tv-results');
      if (!query.trim() || !resultsDiv) {
        if (resultsDiv) resultsDiv.innerHTML = '';
        return;
      }

      resultsDiv.innerHTML =
        '<div class="text-gray-400 text-sm">🔄 Buscando...</div>';

      try {
        const response = await fetch(
          `https://api.themoviedb.org/3/search/tv?api_key=4c13d79da36a97c80e70be9f823eb0ac&language=es-ES&query=${encodeURIComponent(query)}`
        );
        const data = await response.json();

        const results = data.results
          .slice(0, 3)
          .map(
            (show) => `
          <div class="bg-gray-700 p-2 rounded flex items-center justify-between">
            <div>
              <span class="text-white text-sm font-medium">${show.name}</span>
              <span class="text-gray-400 text-xs ml-2">(${new Date(show.first_air_date).getFullYear()})</span>
            </div>
            <button onclick="watchlistManager.addItem({id: ${show.id}, name: '${show.name.replace(/'/g, "\\'")}', year: ${new Date(show.first_air_date).getFullYear()}, rating: ${show.vote_average}, poster_path: '${show.poster_path || ''}'}, 'tv')" class="bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs transition-colors">
              ➕ Agregar
            </button>
          </div>
        `
          )
          .join('');

        resultsDiv.innerHTML =
          results ||
          '<div class="text-gray-400 text-sm">No se encontraron resultados</div>';
      } catch (error) {
        resultsDiv.innerHTML =
          '<div class="text-red-400 text-sm">Error en la búsqueda</div>';
      }
    }

    showNotification(message, type = 'info') {
      const colors = {
        success: 'bg-green-600',
        warning: 'bg-yellow-600',
        error: 'bg-red-600',
        info: 'bg-blue-600',
      };

      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-all transform translate-x-0`;
      notification.textContent = message;

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }
  }

  // Quick add function for demo
  window.addQuickItem = (type, title, year, rating) => {
    watchlistManager.addItem(
      {
        id: Date.now(),
        title,
        name: title,
        year,
        rating,
        poster_path: null,
      },
      type
    );
  };

  // Initialize when DOM is loaded
  let watchlistManager;

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      watchlistManager = new WatchlistManager();
      window.watchlistManager = watchlistManager;
    });
  } else {
    watchlistManager = new WatchlistManager();
    window.watchlistManager = watchlistManager;
  }
</script>

<style>
  .bg-gray-750 {
    background-color: rgb(55 65 81 / 0.8);
  }
</style>
